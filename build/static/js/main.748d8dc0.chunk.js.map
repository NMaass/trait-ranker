{"version":3,"sources":["Assets/listOfAllTraits.js","components/Selection/initialTraits.js","Assets/ShuffleUtil.js","components/Results.js","components/Traits/StaticTrait.js","components/RankStack.js","components/NavBar/HelpDialogBox.js","components/NavBar/HomeButton.js","components/NavBar/NavBar.js","components/Traits/TraitCard.js","components/Traits/Trait.js","components/Selection/Column.js","components/Selection/SelectionPage.js","components/App.js","index.js"],"names":["traitIcons","allTraits","initialTraits","traits","columns","id","title","traitIds","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","listOfAllTraits","columnOrder","Results","topTraits","setTopTraits","fetchTopTraits","useEffect","List","reverse","splice","map","trait","ListItem","ListItemAvatar","Provider","value","size","ListItemText","StaticTrait","onClick","isMobile","useMediaQuery","className","RankStack","history","React","useState","slice","displayedPairs","setDisplayedPairs","initialPairs","useRef","sortedPairs","sortingPair","joinStack","mergeStack","leftGuess","rightGuess","finishedList","unevenList","current","pop","i","push","handlePick","pick","console","log","doJoinRound","doMergeRound","doInitialRound","some","any","buildMerge","shift","concat","clearStacks","list","buildJoinStack","buildMergeStack","leftMergeStack","rightMergeStack","Grid","container","spacing","alignItems","justifyContent","direction","item","HelpDialogBox","open","setOpen","IconButton","Dialog","onClose","maxWidth","sx","DialogTitle","DialogContentText","paragraph","HomeButton","Button","color","NavBar","Box","flexGrow","AppBar","position","Toolbar","style","marginLeft","TraitCard","provided","dragHandleProps","draggable","Container","styled","div","draggingCustomStyle","transform","axisLockX","split","Trait","index","draggableId","snapshot","draggableProps","ref","innerRef","isDragging","TraitList","props","isDraggingOver","hoverColor","isStarter","Column","column","droppableId","classname","droppableProps","margin","indexOf","placeholder","SelectionPage","columnData","onDragEnd","column2","column3","height","width","wrap","column1","App","useHistory","setColumnData","sessionStorage","setItem","getItem","storedTraits","destination","source","start","finish","startTraitIds","Array","from","newStart","finishTraitIds","newFinish","newData","newTraitIds","newColumn","exact","path","AppWrapper","basename","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.748d8dc0.chunk.js","sourcesContent":["\r\nimport {\r\n    BiAlarmOff,\r\n    BiHappyBeaming,\r\n    BsFillShieldLockFill,\r\n    BsFillStopwatchFill,\r\n    BsFillTreeFill,\r\n    BsFillUnlockFill,\r\n    BsMusicNoteBeamed,\r\n    BsPeace,\r\n    FaChild,\r\n    FaFistRaised,\r\n    FaHandshake,\r\n    FaPiggyBank,\r\n    FaRegKissWinkHeart,\r\n    FaTools,\r\n    FiTarget,\r\n    GiBreakingChain,\r\n    GiChoice,\r\n    GiClothes,\r\n    GiCrossedSwords,\r\n    GiFlyingFlag,\r\n    GiGearHammer,\r\n    GiGlowingHands,\r\n    GiHeartInside,\r\n    GiHeartKey,\r\n    GiMedallist,\r\n    GiMountainClimbing, GiMountainRoad,\r\n    GiNightSleep,\r\n    GiPalette,\r\n    GiPillow,\r\n    GiSplitArrows,\r\n    GrLineChart,\r\n    HiOutlineScale,\r\n    HiPuzzle, MdAccessTime, MdConnectWithoutContact,\r\n    MdFamilyRestroom, MdFitnessCenter, MdLeaderboard, MdMenuBook,\r\n    MdOutlineThumbsUpDown, MdOutlineVerifiedUser, MdPsychology, MdSocialDistance, MdSportsSoccer, MdVolunteerActivism,\r\n    RiEmotionSadLine,\r\n    RiGovernmentLine,\r\n    RiUserHeartFill, SiHandshake\r\n} from \"react-icons/all\";\r\n\r\nconst allTraits = [\r\n    'Artistry',\r\n    'Musical Skill',\r\n    'Leadership',\r\n    'Excellence',\r\n    'Physical Appearance',\r\n    'Independence',\r\n    'Flexibility',\r\n    'Personal Space',\r\n    'Kindness',\r\n    'Strength',\r\n    'Wisdom',\r\n    'Empathy',\r\n    'Spontaneity',\r\n    'Adventure',\r\n    'Integrity',\r\n    'Generosity',\r\n    'Patience',\r\n    'Perseverance',\r\n    'Romance',\r\n    'Athleticism',\r\n    'Constructive Criticism',\r\n    'Peace',\r\n    'Determination',\r\n    'Resourcefulness',\r\n    'Hope',\r\n    'Challenge',\r\n    'Decisiveness',\r\n    'Confidence',\r\n    'Discipline',\r\n    'Frugality',\r\n    'Optimism',\r\n    'Ambition',\r\n    'Craftsmanship',\r\n    'Vulnerability',\r\n]\r\n\r\nexport const traitIcons = {\r\n    'Artistry': <GiPalette/>,\r\n    'Musical Skill': <BsMusicNoteBeamed/>,\r\n    'Leadership': <GiFlyingFlag/>,\r\n    'Excellence': <MdLeaderboard/>,\r\n    'Self Control': <MdPsychology/>,\r\n    'Physical Appearance': <GiClothes/>,\r\n    'Independence': <GiBreakingChain/> ,\r\n    'Flexibility': <GiSplitArrows/>,\r\n    'Personal Space': <MdSocialDistance/>,\r\n    'Rest': <GiNightSleep/>,\r\n    'Kindness': <RiUserHeartFill/>,\r\n    'Recreation': <MdSportsSoccer/>,\r\n    'Strength': <MdFitnessCenter/>,\r\n    'Wisdom': <MdMenuBook/>,\r\n    'Empathy': <MdConnectWithoutContact/>,\r\n    'Trust':  <SiHandshake/>,\r\n    'Spontaneity': <BiAlarmOff/>,\r\n    'Adventure': <GiMountainRoad/>,\r\n    'Integrity': <MdOutlineVerifiedUser/>,\r\n    'Generosity': <MdVolunteerActivism/>,\r\n    'Patience': <MdAccessTime/>,\r\n    'Perseverance': <GiMountainClimbing/>,\r\n    'Mercy': <GiGlowingHands/>,\r\n    'Romance': <GiHeartInside/>,\r\n    'Athleticism': <GiMedallist/>,\r\n    'Constructive Criticism': <MdOutlineThumbsUpDown/>,\r\n    'Productivity': <GiGearHammer/>,\r\n    'Nature': <BsFillTreeFill/>,\r\n    'Peace': <BsPeace/>,\r\n    'Determination': <FaFistRaised/>,\r\n    'Resourcefulness': <HiPuzzle/>,\r\n    'Authority': <RiGovernmentLine/>,\r\n    'Hope': <GiHeartKey/>,\r\n    'Challenge': <GiCrossedSwords/>,\r\n    'Decisiveness': <GiChoice/>,\r\n    'Comfort': <GiPillow/>,\r\n    'Joy': <BiHappyBeaming/>,\r\n    'Fairness': <HiOutlineScale/>,\r\n    'Affection': <FaRegKissWinkHeart/>,\r\n    'Confidence': <BsFillShieldLockFill/>,\r\n    'Respect': <FaHandshake/>,\r\n    'Discipline': <BsFillStopwatchFill/>,\r\n    'Frugality': <FaPiggyBank/>,\r\n    'Suffering': <RiEmotionSadLine/>,\r\n    'Child-likeness': <FaChild/>,\r\n    'Optimism': <GrLineChart/>,\r\n    'Ambition': <FiTarget/>,\r\n    'Craftsmanship': <FaTools/>,\r\n    'Vulnerability': <BsFillUnlockFill/>,\r\n    'Family': <MdFamilyRestroom/>,\r\n }\r\n export default allTraits;\r\n","import traits from \"../../Assets/listOfAllTraits\";\r\nimport listOfAllTraits from \"../../Assets/listOfAllTraits\";\r\nimport shuffle from \"../../Assets/ShuffleUtil\";\r\nconst initialTraits = {\r\n    traits,\r\n    columns:{\r\n        'column1':{\r\n            id: 'column1',\r\n            title:'Not Valued',\r\n            traitIds:[],\r\n        },\r\n        'column2':{\r\n            id: 'column2',\r\n            title:'Traits',\r\n            traitIds:shuffle(listOfAllTraits),\r\n        },\r\n        'column3':{\r\n            id: 'column3',\r\n            title:'Valued',\r\n            traitIds:[],\r\n        },\r\n    },\r\n    columnOrder: ['column1','column2','column3'],\r\n};\r\nexport default initialTraits;\r\n","export default function shuffle(array) {\r\n    let currentIndex = array.length,  randomIndex;\r\n\r\n    // While there remain elements to shuffle.\r\n    while (currentIndex !== 0) {\r\n\r\n        // Pick a remaining element.\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport {traitIcons} from \"../Assets/listOfAllTraits\";\r\nimport {List, ListItem, ListItemAvatar, ListItemText} from \"@mui/material\";\r\nimport {IconContext} from \"react-icons\";\r\n\r\n\r\nconst Results = ({topTraits, setTopTraits, fetchTopTraits}) => {\r\n\r\n    useEffect(()=>{\r\n        if(topTraits.length === 0){\r\n            setTopTraits(fetchTopTraits)\r\n        }\r\n    },[fetchTopTraits,topTraits, setTopTraits])\r\n    return(\r\n        <div>\r\n            <h3>\r\n                Top Traits\r\n            </h3>\r\n            <List>\r\n                {topTraits.reverse().splice(0,7).map((trait) =>{\r\n                    return(\r\n                        <ListItem key={trait}>\r\n                            <ListItemAvatar>\r\n                                <IconContext.Provider value={{size: '6vw'}}>\r\n                                    {traitIcons[trait]}\r\n                                </IconContext.Provider>\r\n                            </ListItemAvatar>\r\n                            <ListItemText >\r\n                                {trait}\r\n                            </ListItemText>\r\n                        </ListItem>\r\n                    )\r\n                })}\r\n            </List>\r\n        </div>)\r\n};\r\n\r\nexport default Results;\r\n","import React from \"react\";\r\nimport '../../style/CardStacking.scss'\r\nimport {traitIcons} from \"../../Assets/listOfAllTraits\";\r\nimport {IconContext} from \"react-icons\";\r\nimport {useMediaQuery} from \"@mui/material\";\r\n\r\n\r\n\r\nconst StaticTrait = ({trait, onClick}) => {\r\n    const isMobile = useMediaQuery('(min-width:1024px')\r\n    return (\r\n        <div className='card rankCard' onClick={onClick}>\r\n                <h1>\r\n                    {trait}\r\n                </h1>\r\n            <IconContext.Provider value={isMobile ? {size: '6vw'} : {size: '20vw'}}>\r\n                {traitIcons[trait]}\r\n            </IconContext.Provider>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default StaticTrait;\r\n","import React, {useEffect} from \"react\";\r\nimport StaticTrait from \"./Traits/StaticTrait\";\r\nimport {Grid, useMediaQuery} from \"@mui/material\";\r\n\r\n\r\n\r\n\r\n\r\nconst RankStack = ({ topTraits, setTopTraits, history, fetchTopTraits}) => {\r\n    const [displayedPairs, setDisplayedPairs] = React.useState(topTraits.slice(0,2));\r\n\r\n    let initialPairs = React.useRef([]);\r\n    let sortedPairs = React.useRef([]);\r\n    let sortingPair = React.useRef([]);\r\n\r\n    let joinStack = React.useRef([]);\r\n    let mergeStack = React.useRef([]);\r\n\r\n    let leftGuess = React.useRef(0);\r\n    let rightGuess = React.useRef(0);\r\n\r\n    let finishedList = React.useRef([]);\r\n    let unevenList = React.useRef(null);\r\n\r\n    useEffect(() => {\r\n        let initialTraits = fetchTopTraits()\r\n        if(topTraits.length === 0){\r\n            setTopTraits(fetchTopTraits)\r\n        }\r\n        setDisplayedPairs(initialTraits.slice(0,2))\r\n\r\n        if (initialTraits.length % 2){ //initialize finished list with first element if uneven\r\n            unevenList.current = initialTraits.pop();\r\n        }\r\n        for (let i = 0; i < initialTraits.length; i += 2){ //generate pairs for the user to sort\r\n            initialPairs.current.push([initialTraits[i],initialTraits[i+1]]);\r\n        }\r\n    },[fetchTopTraits, setTopTraits, topTraits])\r\n\r\n    const handlePick = (pick) => {  //looks at which arrays are empty to determine what stage the sort is in\r\n        console.log(\"pick: \" + pick)\r\n\r\n        if(joinStack.current.length !== 0){ //checking for 'easy' joins\r\n            doJoinRound(pick)\r\n        }\r\n        else if (mergeStack.current.length !== 0){\r\n            doMergeRound(pick)\r\n        }\r\n\r\n        if (initialPairs.current.length !== 0){ //sorting pairs\r\n            doInitialRound(pick);\r\n        }\r\n\r\n        let mergeStackHasValues = mergeStack.current.some(function (any) {return any.length}); //check if all arrays are empty\r\n        if (!mergeStackHasValues && initialPairs.current.length === 0){\r\n            if (sortedPairs.current.length === 0 ){\r\n                setTopTraits(finishedList.current);\r\n                history.push('/Results');\r\n            }\r\n            else {\r\n                buildMerge(sortedPairs.current[0])\r\n            }\r\n        }\r\n\r\n\r\n        console.log(\"initialPairs: \", initialPairs.current)\r\n        console.log(\"sortedPairs: \", sortedPairs.current)\r\n        console.log(\"finished list: \", finishedList.current)\r\n        console.log(\"Join stack: \", joinStack.current)\r\n        console.log(\"mergeStack\", mergeStack.current)\r\n\r\n    }\r\n\r\n\r\n\r\n    const doInitialRound = (pick) => {\r\n\r\n        if(pick === initialPairs.current[0][0]){\r\n            initialPairs.current[0].reverse();\r\n            console.log(\"reversed \", initialPairs.current[0])\r\n        }\r\n\r\n        sortedPairs.current.push(initialPairs.current.shift());\r\n\r\n        setDisplayedPairs(initialPairs.current[0]);\r\n        if(initialPairs.current.length === 1){ //set up the merges one render ahead\r\n            if(unevenList.current !== null){ //populate finished list with uneven element\r\n                finishedList.current.push(unevenList.current);\r\n                console.log(\"Prepping for round uneven\")\r\n            }\r\n            else {\r\n                finishedList.current = sortedPairs.current.shift(); //populate list with first sorted pair\r\n                console.log(\"Prepping for round 2\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    const doJoinRound = (pick) => {\r\n        if (joinStack.current.length === 2){ //check if left or right join\r\n            if(pick === sortingPair.current[0]){\r\n                finishedList.current = finishedList.current.concat(sortingPair.current) //a 'successful' join\r\n                clearStacks();\r\n            }\r\n            else {\r\n                joinStack.current.shift();\r\n                setDisplayedPairs(joinStack.current[0])\r\n            }\r\n        }\r\n        else {\r\n            if (pick === sortingPair.current[1]){\r\n                joinStack.current = [];\r\n                setDisplayedPairs(mergeStack.current[0][0])\r\n            }\r\n            else {\r\n                finishedList.current = (sortingPair.current.concat(finishedList.current))\r\n                clearStacks();\r\n            }\r\n        }\r\n    }\r\n\r\n    const doMergeRound = (pick) => { //tries to shift back and forth between items to reduce fatigue\r\n\r\n        if(displayedPairs[0] === sortingPair.current[0]) { //lower\r\n            if (pick !== displayedPairs[0]) { //found what is liked more\r\n                finishedList.current.splice(leftGuess.current, 0, sortingPair.current[0]);\r\n                mergeStack.current[0] = [];\r\n            }\r\n            else { //keeps going\r\n                mergeStack.current[0].shift();\r\n                leftGuess.current++;\r\n                console.log(\"leftGuess \", leftGuess.current);\r\n                if(mergeStack.current[0].length === 0){\r\n                    finishedList.current.splice(leftGuess.current, 0, sortingPair.current[0]);\r\n                    mergeStack.current[0].shift();\r\n                }\r\n            }\r\n            if(mergeStack.current[1].length !== 0){\r\n                setDisplayedPairs(mergeStack.current[1][0]);\r\n            }\r\n            else {\r\n                setDisplayedPairs(mergeStack.current[0][0]);\r\n            }\r\n        }\r\n        else { // higher\r\n            if(pick === displayedPairs[0]){\r\n                finishedList.current.splice(rightGuess.current+1, 0, sortingPair.current[1]);\r\n                mergeStack.current[1] = []\r\n            }\r\n            else {\r\n                mergeStack.current[1].shift();\r\n                rightGuess.current--;\r\n                console.log(\"rightGuess \", rightGuess.current);\r\n                if(mergeStack.current[1].length === 0){\r\n                    finishedList.current.splice(rightGuess.current+1, 0, sortingPair.current[1]);\r\n                    mergeStack.current[1].shift();\r\n                }\r\n            }\r\n            if(mergeStack.current[0].length !== 0){\r\n                setDisplayedPairs(mergeStack.current[0][0]);\r\n            }\r\n            else {\r\n                setDisplayedPairs(mergeStack.current[1][0])\r\n            }\r\n        }\r\n    }\r\n\r\n    const buildMerge = (list) => {\r\n        console.log(\"building round 2\")\r\n        buildJoinStack(list);\r\n        buildMergeStack(list);\r\n        sortingPair.current = sortedPairs.current.shift();\r\n        leftGuess.current = 0;\r\n        rightGuess.current = finishedList.current.length;\r\n    }\r\n\r\n    const buildJoinStack = (list) =>{\r\n        joinStack.current.push([list[0], finishedList.current[finishedList.current.length-1]]);\r\n        joinStack.current.push([list[1],finishedList.current[0]]);\r\n        setDisplayedPairs(joinStack.current[0])\r\n        console.log(\"Initial Join stack: \", joinStack.current)\r\n    }\r\n\r\n    const buildMergeStack = (list) => {\r\n        let leftMergeStack = [];\r\n        let rightMergeStack = [];\r\n\r\n        for(let i = 0; i < finishedList.current.length; i++){\r\n            leftMergeStack.push([list[0],finishedList.current[i]]);\r\n        }\r\n        for(let i = finishedList.current.length - 1; i >= 0; i--){\r\n            rightMergeStack.push([list[1], finishedList.current[i]]);\r\n        }\r\n        mergeStack.current = [leftMergeStack, rightMergeStack];\r\n        console.log(\"initial mergeStack\", mergeStack.current)\r\n    }\r\n    const clearStacks = () => {\r\n        joinStack.current = [];\r\n        mergeStack.current = [];\r\n        sortingPair.current = [];\r\n    }\r\n\r\n    const isMobile = useMediaQuery('(min-width:1024px')\r\n\r\n    return (\r\n        <div>\r\n            <Grid container\r\n                  spacing={isMobile ? 60 : 8}\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\"\r\n                  direction={isMobile ? \"row\" : \"column\"}\r\n            >\r\n                <Grid item>\r\n                    <StaticTrait onClick={() => handlePick(displayedPairs[0])} trait={displayedPairs[0]}/>\r\n                </Grid>\r\n                <Grid item>\r\n                    <StaticTrait onClick={() => handlePick(displayedPairs[1])} trait={displayedPairs[1]}/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default RankStack;\r\n\r\n\r\n","import React from \"react\";\r\nimport {Dialog, DialogContentText, DialogTitle, IconButton} from \"@mui/material\";\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\n\r\nconst HelpDialogBox = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <IconButton\r\n                size=\"large\"\r\n                onClick={handleOpen}\r\n            >\r\n                <HelpOutlineIcon/>\r\n            </IconButton>\r\n\r\n        <Dialog\r\n            onClose={handleClose}\r\n            open = {open}\r\n            maxWidth={\"xl\"}\r\n            sx={{\r\n\r\n            }}\r\n        >\r\n            <DialogTitle>Instructions</DialogTitle>\r\n            <DialogContentText paragraph={true}>\r\n                <br/>\r\n                <br/>-Drag the traits into the stack you best describes how you feel about them\r\n                <br/>- This is for your personal use so the definitions are subjective to you\r\n            </DialogContentText>\r\n        </Dialog>\r\n        </div>\r\n    )\r\n}\r\nexport default HelpDialogBox;\r\n","import React from \"react\";\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst HomeButton = ({history}) => {\r\n    const handleHome = () => {\r\n        history.push('/')\r\n    }\r\n    return(\r\n        <Button\r\n            color=\"inherit\"\r\n            onClick={handleHome}\r\n        >\r\n            Trait Ranker</Button>\r\n    )\r\n}\r\nexport default HomeButton;\r\n\r\n\r\n","import React from \"react\";\r\nimport {AppBar, Box, Toolbar} from \"@mui/material\";\r\n\r\nimport HelpDialogBox from \"./HelpDialogBox\";\r\nimport HomeButton from \"./HomeButton\";\r\n\r\n\r\nconst NavBar = ({history}) => {\r\nreturn(\r\n    <Box sx={{flexGrow: 1}}>\r\n        <AppBar position=\"fixed\">\r\n            <Toolbar>\r\n                <HomeButton history={history} />\r\n                <div style={{marginLeft: \"auto\"}}>\r\n                    <HelpDialogBox/>\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    </Box>\r\n)\r\n}\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport '../../style/CardStacking.scss'\r\nimport {traitIcons} from \"../../Assets/listOfAllTraits\";\r\nimport { IconContext } from \"react-icons\";\r\nimport {useMediaQuery} from \"@mui/material\";\r\n\r\nconst TraitCard = ({trait, provided}) => {\r\n    const isMobile = useMediaQuery('(min-width:1024px')\r\n\r\n\r\n    return (\r\n        <div className='card selectionCard jumper' {...provided.dragHandleProps} draggable={true} id={trait}>\r\n            <h1>\r\n                {trait}\r\n            </h1>\r\n            <IconContext.Provider value={isMobile ? {size: '6vw'} : {size: '60vw'}}>\r\n                {traitIcons[trait]}\r\n            </IconContext.Provider>\r\n        </div>\r\n        )}\r\nexport default TraitCard\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport TraitCard from \"./TraitCard\";\r\n\r\nconst Container = styled.div`\r\n \r\n`;\r\n\r\n\r\nconst draggingCustomStyle = (style: React.CSSProperties | undefined) => {\r\n    if (style?.transform) {\r\n        const axisLockX = `${style.transform.split(\",\").shift()}, 0px)`;\r\n        return {\r\n            ...style,\r\n            transform: axisLockX,\r\n        };\r\n    }\r\n    return style;\r\n};\r\n\r\nconst Trait = ({ trait, index}) => {\r\n    return(\r\n        <Draggable draggableId={trait} key={trait} index={index} >\r\n            {(provided, snapshot) => (\r\n                <Container\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                    isDragging={snapshot.isDragging}\r\n                    style={draggingCustomStyle(provided.draggableProps.style)}\r\n                >\r\n                        <TraitCard trait={trait} provided={provided} />\r\n                </Container>\r\n            )}\r\n\r\n        </Draggable>\r\n    )\r\n}\r\nexport default Trait\r\n","import React from \"react\";\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\nimport styled from 'styled-components'\r\nimport Trait from '../Traits/Trait';\r\nimport '../../style/CardStacking.scss'\r\nimport {Grid} from \"@mui/material\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`;\r\n\r\n\r\nconst TraitList = styled.div`\r\n  transition: background-color 0.2s ease;\r\n  background-color: ${props => (props.isDraggingOver ? props.hoverColor: 'white')};\r\n  display: flex;\r\n  min-width: ${props => (props.isStarter ? '1px' : '49.9vw')};\r\n  min-height:  100vh;\r\n  max-width: ${props =>(props.isStarter && '1px')};\r\n`;\r\n\r\n\r\n\r\nconst Column = ({ column, isStarter = false, hoverColor = 'lightBlue'}) => {\r\n    return(\r\n        <Container>\r\n            <Droppable key={column.id} droppableId={column.id} direction='horizontal'>\r\n                {(provided, snapshot) => (\r\n                    <TraitList\r\n                        classname='cards stack'\r\n                        ref={provided.innerRef}\r\n                        isStarter={isStarter}\r\n                        hoverColor = {hoverColor}\r\n                        isDraggingOver={snapshot.isDraggingOver}\r\n                        {...provided.droppableProps}\r\n                    >\r\n                        <Grid\r\n                            container\r\n                            direction=\"column\"\r\n                            alignItems=\"center\"\r\n                            justifyContent=\"center\"\r\n                        >\r\n                            <Grid item margin=\"auto\">\r\n                        {isStarter && <Trait key={column?.traitIds[0]}\r\n                                             trait={column?.traitIds[0]}\r\n                                             index={column?.traitIds.indexOf(column?.traitIds[0])}\r\n                        />}\r\n                        {provided.placeholder}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </TraitList>\r\n                )}\r\n            </Droppable>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Column\r\n","import React, {useEffect} from \"react\";\r\nimport Column from \"./Column\";\r\nimport {DragDropContext} from \"react-beautiful-dnd\";\r\nimport {Box, Grid} from \"@mui/material\";\r\n\r\n\r\n\r\n\r\n\r\nconst SelectionPage = ({columnData, onDragEnd,  setTopTraits,  history}) =>{\r\n\r\n    useEffect(()=>{\r\n        console.log(\"currentTraits: \", columnData.columns.column2.traitIds)\r\n        console.log(\"top traits: \", columnData.columns.column3.traitIds)\r\n        if(columnData.columns.column2.traitIds.length === 0){\r\n            console.log(columnData.columns.column3.traitIds)\r\n               setTopTraits(columnData.columns.column3.traitIds);\r\n               history.push(\"/Rank\");\r\n           }\r\n\r\n    },[columnData, history, setTopTraits])\r\n\r\n    return(\r\n        <Box height={'100vh'} width={'100vw'}>\r\n                <div>\r\n                    <DragDropContext onDragEnd={onDragEnd} direction={'row'}>\r\n                        <Grid container\r\n                              spacing={0}\r\n                              wrap=\"nowrap\">\r\n                            <Grid item key={columnData.columnOrder[0]}>\r\n                                <Column column={columnData.columns.column1} hoverColor={'LightPink'}/>\r\n                            </Grid>\r\n                            <Grid item key={columnData.columnOrder[1]}>\r\n                                <Column column={columnData.columns.column2} isStarter={true} />\r\n                            </Grid>\r\n                            <Grid item key={columnData.columnOrder[2]}>\r\n                                <Column column={columnData.columns.column3} hoverColor={'LightGreen'}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DragDropContext>\r\n                </div>\r\n        </Box>\r\n    )\r\n};\r\nexport default SelectionPage;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport initialTraits from './Selection/initialTraits';\r\nimport Results from \"./Results\";\r\nimport RankStack from \"./RankStack\";\r\nimport NavBar from \"./NavBar/NavBar\";\r\nimport {BrowserRouter, Route, useHistory} from \"react-router-dom\";\r\nimport SelectionPage from \"./Selection/SelectionPage\";\r\n\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n    const history = useHistory();\r\n    const [columnData, setColumnData] = useState(initialTraits);\r\n    const [topTraits, setTopTraits] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        sessionStorage.setItem(\"topTraits\", topTraits)\r\n        console.log(\"setting storage traits: \", sessionStorage.getItem(\"topTraits\"), topTraits)\r\n    },[topTraits, setTopTraits])\r\n\r\n    const fetchTopTraits = () => {\r\n        let storedTraits;\r\n        if (topTraits.length > 0){\r\n            storedTraits = topTraits\r\n    }\r\n        else{\r\n            storedTraits = sessionStorage.getItem(\"topTraits\").split(',')\r\n            console.log(\"grabbing from storage:\", initialTraits)\r\n            setTopTraits(storedTraits)\r\n            if(storedTraits.length === 0){\r\n                history.push('/')\r\n            }\r\n        }\r\n        return storedTraits\r\n    }\r\n\r\n    const onDragEnd = ({destination, source, draggableId}) => {\r\n        if(!destination){\r\n            return;\r\n        }\r\n        //make sure the draggable moved\r\n        if(\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ){\r\n            return;\r\n        }\r\n        const start = columnData.columns[source.droppableId];\r\n        const finish = columnData.columns[destination.droppableId];\r\n\r\n        //if moving within the same column\r\n        if(start === finish){\r\n\r\n            const newTraitIds = Array.from(start.traitIds);\r\n            newTraitIds.splice(source.index, 1);\r\n            newTraitIds.splice(destination.index,0,draggableId);\r\n\r\n            const newColumn = {\r\n                ...start,\r\n                traitIds:newTraitIds,\r\n            };\r\n\r\n            //override existing column\r\n            const newData = {\r\n                ...columnData,\r\n                columns:{\r\n                    ...columnData.columns,\r\n                    [newColumn.id]:newColumn,\r\n                }\r\n            }\r\n            setColumnData(newData);\r\n            return;\r\n        }\r\n        //cross column moving\r\n        const startTraitIds = Array.from(start.traitIds);\r\n        startTraitIds.splice(source.index,1);\r\n        const newStart = {\r\n            ...start,\r\n            traitIds: startTraitIds,\r\n        }\r\n\r\n        const finishTraitIds = Array.from(finish.traitIds);\r\n        finishTraitIds.splice(destination.index,0,draggableId);\r\n        const newFinish = {\r\n            ...finish,\r\n            traitIds: finishTraitIds\r\n        }\r\n\r\n        const newData = {\r\n            ...columnData,\r\n            columns:{\r\n                ...columnData.columns,\r\n                [newStart.id]: newStart,\r\n                [newFinish.id]: newFinish,\r\n            },\r\n        }\r\n        setColumnData(newData);\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <NavBar history={history}/>\r\n            <Route exact path='/'>\r\n                <SelectionPage columnData={columnData} topTraits={topTraits} setTopTraits={setTopTraits} onDragEnd={onDragEnd} setColumnData={setColumnData} history={history}/>\r\n            </Route>\r\n            <Route path='/Rank'>\r\n                <RankStack onDragEnd={onDragEnd} topTraits={topTraits} setTopTraits={setTopTraits} history={history} fetchTopTraits={fetchTopTraits}/>\r\n            </Route>\r\n            <Route path='/Results'>\r\n                <Results topTraits={topTraits} setTopTraits={setTopTraits} fetchTopTraits={fetchTopTraits}/>\r\n            </Route>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AppWrapper = () => {\r\n    return(\r\n        <BrowserRouter basename={'/trait-ranker'}>\r\n            <App/>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n\r\nexport default AppWrapper;\r\n","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport AppWrapper from \"./components/App\";\r\n\r\nReactDOM.render(<AppWrapper/>, document.querySelector('#root'));\r\n"],"sourceRoot":""}