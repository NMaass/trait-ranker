{"version":3,"sources":["utils/listOfAllTraits.js","utils/ShuffleUtil.js","components/Selection/initialTraits.js","utils/makeIdUtil.js","components/CopyableLink.js","utils/Firebase.js","components/SmallTraitList.js","components/ResultsPage.js","components/TraitCards/RankingTrait.js","components/RankingPage.js","components/NavBar/HelpDialogBox.js","components/NavBar/HomeButton.js","components/NavBar/NavBar.js","components/TraitCards/SelectionTrait.js","components/TraitCards/TraitDraggable.js","components/Selection/SelectionDroppable.js","components/Selection/SelectionPage.js","components/TraitCards/ReorderTrait.js","components/TraitCards/FreeDragTrait.js","components/Share/ReorderableColumn.js","components/Share/ReorderGuess.js","components/Share/GuessPage.js","components/Share/SharedPage.js","components/App.js","index.js"],"names":["traitIcons","allTraits","shuffle","array","randomIndex","currentIndex","length","Math","floor","random","initialTraits","traits","columns","id","title","traitIds","listOfAllTraits","columnOrder","makeId","result","characters","charactersLength","i","charAt","CopyableLink","text","useState","showTooltip","setShowTooltip","Grid","container","direction","item","Tooltip","open","leaveDelay","onClose","Button","variant","onClick","navigator","clipboard","writeText","then","console","log","catch","InputLabel","varient","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getAnalytics","getFirestore","setDBTraits","hash","traitArray","setDoc","doc","e","getDBTraits","docRef","getDoc","docSnap","exists","data","SmallTraitList","List","splice","map","trait","ListItem","ListItemAvatar","Provider","value","size","ListItemText","ResultsPage","topTraits","useRef","useEffect","current","reverse","RankingTrait","isMobile","useMediaQuery","rippleRef","React","className","onMouseDown","start","onMouseUp","stop","TouchRipple","ref","center","RankingPage","setTopTraits","history","fetchTopTraits","slice","displayedPairs","setDisplayedPairs","initialPairs","sortedPairs","sortingPair","joinStack","mergeStack","leftGuess","rightGuess","finishedList","unevenList","pop","push","handlePick","pick","doJoinRound","doMergeRound","doInitialRound","some","any","buildMerge","shift","concat","clearStacks","list","buildJoinStack","buildMergeStack","leftMergeStack","rightMergeStack","spacing","alignItems","justifyContent","HelpDialogBox","setOpen","IconButton","Dialog","maxWidth","style","borderRadius","DialogContentText","paragraph","margin","HomeButton","color","NavBar","Box","sx","flexGrow","AppBar","position","Toolbar","marginLeft","SelectionTrait","provided","dragHandleProps","draggable","Container","styled","div","getStyle","snapshot","transform","axisLockX","split","draggingCustomStyle","isDropAnimating","dropAnimation","moveTo","duration","draggingOver","offset","translate","y","transition","TraitDraggable","index","draggableId","draggableProps","innerRef","isDragging","TraitList","props","isDraggingOver","hoverColor","isStarter","SelectionDroppable","column","droppableId","classname","droppableProps","indexOf","placeholder","SelectionPage","columnData","swipeHandlers","column2","column3","wrap","column1","ReorderTrait","FreeDragTrait","DragColumn","ReorderableColumn","ReorderGuess","onDone","GuessPage","setColumnData","traitsLeft","wrongTraits","traitPool","finalList","currentTraits","setCurrentTraits","showPicks","setShowPicks","showColumn","setShowColumn","includes","loadNextTraits","newTraits","guessing","newColumnData","SharedPage","useParams","storedTraits","setStoredTraits","showList","setShowList","showGuessing","setShowGuessing","showOptions","setShowOptions","spacking","App","useHistory","sensorAPIRef","ReactGA","initialize","swipe","api","warn","x","end","preDrag","tryGetLock","drag","fluidLift","points","tweenFunctions","easeOutCirc","moveStepByStep","useSwipeable","onSwipedLeft","onSwipedRight","values","requestAnimationFrame","newPosition","move","drop","onDragEnd","destination","source","finish","startTraitIds","Array","from","newStart","finishTraitIds","newFinish","newData","newTraitIds","newColumn","sensors","exact","path","children","AppWrapper","basename","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.584b85a5.chunk.js","sourcesContent":["\r\nimport {\r\n    BiAlarmOff,\r\n    BiHappyBeaming,\r\n    BsFillShieldLockFill,\r\n    BsFillStopwatchFill,\r\n    BsFillTreeFill,\r\n    BsFillUnlockFill,\r\n    BsMusicNoteBeamed,\r\n    BsPeace,\r\n    FaChild,\r\n    FaFistRaised,\r\n    FaHandshake,\r\n    FaPiggyBank,\r\n    FaRegKissWinkHeart,\r\n    FaTools,\r\n    FiTarget,\r\n    GiBreakingChain,\r\n    GiChoice,\r\n    GiClothes,\r\n    GiCrossedSwords,\r\n    GiFlyingFlag,\r\n    GiGearHammer,\r\n    GiGlowingHands,\r\n    GiHeartInside,\r\n    GiHeartKey,\r\n    GiMedallist,\r\n    GiMountainClimbing, GiMountainRoad,\r\n    GiNightSleep,\r\n    GiPalette,\r\n    GiPillow,\r\n    GiSplitArrows,\r\n    GrLineChart,\r\n    HiOutlineScale,\r\n    HiPuzzle, MdAccessTime, MdConnectWithoutContact,\r\n    MdFamilyRestroom, MdFitnessCenter, MdLeaderboard, MdMenuBook,\r\n    MdOutlineThumbsUpDown, MdOutlineVerifiedUser, MdPsychology, MdSocialDistance, MdSportsSoccer, MdVolunteerActivism,\r\n    RiEmotionSadLine,\r\n    RiGovernmentLine,\r\n    RiUserHeartFill, SiHandshake\r\n} from \"react-icons/all\";\r\n\r\nconst allTraits = [\r\n    'Artistry',\r\n    'Musical Skill',\r\n    'Leadership',\r\n    'Excellence',\r\n    'Physical Appearance',\r\n    'Independence',\r\n    'Flexibility',\r\n    'Personal Space',\r\n    'Kindness',\r\n    'Strength',\r\n    'Wisdom',\r\n    'Empathy',\r\n    'Spontaneity',\r\n    'Adventure',\r\n    'Integrity',\r\n    'Generosity',\r\n    'Patience',\r\n    'Perseverance',\r\n    'Romance',\r\n    'Athleticism',\r\n    'Constructive Criticism',\r\n    'Peace',\r\n    'Determination',\r\n    'Resourcefulness',\r\n    'Hope',\r\n    'Challenge',\r\n    'Decisiveness',\r\n    'Confidence',\r\n    'Discipline',\r\n    'Frugality',\r\n    'Optimism',\r\n    'Ambition',\r\n    'Craftsmanship',\r\n    'Vulnerability',\r\n]\r\n\r\nexport const traitIcons = {\r\n    'Artistry': <GiPalette/>,\r\n    'Musical Skill': <BsMusicNoteBeamed/>,\r\n    'Leadership': <GiFlyingFlag/>,\r\n    'Excellence': <MdLeaderboard/>,\r\n    'Self Control': <MdPsychology/>,\r\n    'Physical Appearance': <GiClothes/>,\r\n    'Independence': <GiBreakingChain/> ,\r\n    'Flexibility': <GiSplitArrows/>,\r\n    'Personal Space': <MdSocialDistance/>,\r\n    'Rest': <GiNightSleep/>,\r\n    'Kindness': <RiUserHeartFill/>,\r\n    'Recreation': <MdSportsSoccer/>,\r\n    'Strength': <MdFitnessCenter/>,\r\n    'Wisdom': <MdMenuBook/>,\r\n    'Empathy': <MdConnectWithoutContact/>,\r\n    'Trust':  <SiHandshake/>,\r\n    'Spontaneity': <BiAlarmOff/>,\r\n    'Adventure': <GiMountainRoad/>,\r\n    'Integrity': <MdOutlineVerifiedUser/>,\r\n    'Generosity': <MdVolunteerActivism/>,\r\n    'Patience': <MdAccessTime/>,\r\n    'Perseverance': <GiMountainClimbing/>,\r\n    'Mercy': <GiGlowingHands/>,\r\n    'Romance': <GiHeartInside/>,\r\n    'Athleticism': <GiMedallist/>,\r\n    'Constructive Criticism': <MdOutlineThumbsUpDown/>,\r\n    'Productivity': <GiGearHammer/>,\r\n    'Nature': <BsFillTreeFill/>,\r\n    'Peace': <BsPeace/>,\r\n    'Determination': <FaFistRaised/>,\r\n    'Resourcefulness': <HiPuzzle/>,\r\n    'Authority': <RiGovernmentLine/>,\r\n    'Hope': <GiHeartKey/>,\r\n    'Challenge': <GiCrossedSwords/>,\r\n    'Decisiveness': <GiChoice/>,\r\n    'Comfort': <GiPillow/>,\r\n    'Joy': <BiHappyBeaming/>,\r\n    'Fairness': <HiOutlineScale/>,\r\n    'Affection': <FaRegKissWinkHeart/>,\r\n    'Confidence': <BsFillShieldLockFill/>,\r\n    'Respect': <FaHandshake/>,\r\n    'Discipline': <BsFillStopwatchFill/>,\r\n    'Frugality': <FaPiggyBank/>,\r\n    'Suffering': <RiEmotionSadLine/>,\r\n    'Child-likeness': <FaChild/>,\r\n    'Optimism': <GrLineChart/>,\r\n    'Ambition': <FiTarget/>,\r\n    'Craftsmanship': <FaTools/>,\r\n    'Vulnerability': <BsFillUnlockFill/>,\r\n    'Family': <MdFamilyRestroom/>,\r\n }\r\n export default allTraits;\r\n","export default function shuffle(array) {\r\n    let currentIndex = array.length,  randomIndex;\r\n\r\n    // While there remain elements to shuffle.\r\n    while (currentIndex !== 0) {\r\n\r\n        // Pick a remaining element.\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}\r\n","import traits from \"../../utils/listOfAllTraits\";\r\nimport listOfAllTraits from \"../../utils/listOfAllTraits\";\r\nimport shuffle from \"../../utils/ShuffleUtil\";\r\nconst initialTraits = {\r\n    traits,\r\n    columns:{\r\n        'column1':{\r\n            id: 'column1',\r\n            title:'Not Valued',\r\n            traitIds:[],\r\n        },\r\n        'column2':{\r\n            id: 'column2',\r\n            title:'Traits',\r\n            traitIds:shuffle(listOfAllTraits),\r\n        },\r\n        'column3':{\r\n            id: 'column3',\r\n            title:'Valued',\r\n            traitIds:[],\r\n        },\r\n        'guessing':{\r\n            id:'guessing',\r\n            title:'guessing',\r\n            traitIds:[],\r\n        }\r\n    },\r\n    columnOrder: ['column1','column2','column3'],\r\n};\r\nexport default initialTraits;\r\n","export default function makeId(length) {\r\n    let result = '';\r\n    const characters = '0123456789';\r\n    const charactersLength = characters.length;\r\n    for ( let i = 0; i < length; i++ ) {\r\n        result += characters.charAt(Math.floor(Math.random() *\r\n            charactersLength));\r\n    }\r\n    return result;\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Button, Grid, InputLabel, Tooltip} from \"@mui/material\";\r\n\r\nconst CopyableLink = ({text}) =>{\r\n    const [showTooltip, setShowTooltip] = useState(false);\r\n    const onCopy = () =>{\r\n        navigator.clipboard.writeText(text)\r\n            .then(() => console.log(\"Copied!\"))\r\n            .catch(()=> console.log(\"Copy failed\"));\r\n        setShowTooltip(true);\r\n    }\r\n    const onTipClose = () => {\r\n        setShowTooltip(false)\r\n    }\r\n    return(\r\n        <Grid container direction=\"row\">\r\n            <Grid item>\r\n                <Tooltip\r\n                    title={\"Copied to clipboard!\"}\r\n                    open={showTooltip}\r\n                    leaveDelay={1000}\r\n                    onClose={onTipClose}\r\n                >\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={onCopy}\r\n                >\r\n                    Copy and Share!\r\n                </Button>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid item>\r\n                <InputLabel\r\n                    varient=\"filled\"\r\n                >\r\n                    {text}\r\n                </InputLabel>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\nexport default CopyableLink\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport {doc, getDoc, setDoc, getFirestore, collection } from \"firebase/firestore\";\r\n\r\nimport makeId from \"./makeIdUtil\";\r\n\r\n\r\n\r\nconst firebaseConfig = {\r\n\r\n    apiKey: \"AIzaSyBGLwRSqZ-ZO8O7t2Jx0J0ZNq9P5MgzkJ0\",\r\n    authDomain: \"trait-ranker.firebaseapp.com\",\r\n    projectId: \"trait-ranker\",\r\n    storageBucket: \"trait-ranker.appspot.com\",\r\n    messagingSenderId: \"387696334301\",\r\n    appId: \"1:387696334301:web:e7d512845f69e5a2e25234\",\r\n    measurementId: \"G-K0FPHGRC6R\"\r\n\r\n};\r\n\r\n\r\n// Initialize Firebase\r\n\r\nexport const app = initializeApp(firebaseConfig);\r\n\r\nconst analytics = getAnalytics(app);\r\nexport const db = getFirestore(app);\r\n\r\nexport async function getHash ({len}) {\r\n    let timeout = false\r\n    while (timeout === false){\r\n        const hash = makeId(len)\r\n        const docRef = doc(db, hash);\r\n        const docSnap = await getDoc(docRef);\r\n        if(docSnap.exists()){\r\n            console.log('repeat hash')\r\n        }\r\n        else {\r\n            console.log(\"hash \"+hash)\r\n            return hash\r\n        }\r\n    }\r\n}\r\nexport async function setDBTraits(hash, traitArray) {\r\n    await setDoc(doc(db,'Traits',hash),{\r\n        traits: traitArray\r\n    }).catch((e)=>{\r\n        console.log(e)\r\n    })\r\n    console.log(doc(db,'Traits', hash))\r\n}\r\nexport async function getDBTraits(hash) {\r\n    const docRef = doc(db, 'Traits', hash)\r\n    const docSnap = await getDoc(docRef)\r\n    if (docSnap.exists()){\r\n        const traits = docSnap.data().traits\r\n        console.log(traits)\r\n        return traits\r\n    }\r\n    else {\r\n        console.log(\"no doc\")\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {List, ListItem, ListItemAvatar, ListItemText} from \"@mui/material\"\r\nimport {IconContext} from \"react-icons\";\r\nimport {traitIcons} from \"../utils/listOfAllTraits\";\r\n\r\nconst SmallTraitList = ({traits}) => {\r\n    return(\r\n        <List>\r\n            {traits.splice(0,7).map(trait => {\r\n                return(\r\n                    <ListItem key={trait}>\r\n                        <ListItemAvatar>\r\n                            <IconContext.Provider value={{size: '5vh'}}>\r\n                                {traitIcons[trait]}\r\n                            </IconContext.Provider>\r\n                        </ListItemAvatar>\r\n                        <ListItemText >\r\n                            {trait}\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                )\r\n            })}\r\n        </List>\r\n    )\r\n}\r\nexport default SmallTraitList;\r\n","import React, {useEffect, useRef} from \"react\";\r\nimport makeId from \"../utils/makeIdUtil\"\r\nimport CopyableLink from \"./CopyableLink\";\r\nimport {setDBTraits} from \"../utils/Firebase\";\r\nimport SmallTraitList from \"./SmallTraitList\";\r\n\r\n\r\nconst ResultsPage = ({topTraits}) => {\r\n    let hash = useRef(makeId(8));\r\n    useEffect(()=>{\r\n        (async () =>{\r\n            console.log(\"setting traits\", topTraits)\r\n            await setDBTraits(hash.current, topTraits)\r\n        })()\r\n    },[topTraits])\r\n\r\n    return(\r\n        <div>\r\n            <h3>\r\n                Top Traits\r\n            </h3>\r\n            <SmallTraitList traits={topTraits.reverse()}/>\r\n            <CopyableLink text={\"https://nmaass.github.io#/trait-ranker/Share/\" +hash.current}/>\r\n        </div>)\r\n};\r\n\r\nexport default ResultsPage;\r\n","import React from \"react\";\r\nimport '../../style/CardStyle.scss'\r\nimport {traitIcons} from \"../../utils/listOfAllTraits\";\r\nimport {IconContext} from \"react-icons\";\r\nimport {useMediaQuery} from \"@mui/material\";\r\nimport TouchRipple from \"@mui/material/ButtonBase/TouchRipple\";\r\n\r\n\r\n\r\nconst RankingTrait = ({trait, onClick}) => {\r\n    const isMobile = useMediaQuery('(min-width:1024px')\r\n\r\n    const rippleRef = React.useRef(null);\r\n    const onRippleStart = (e) => {\r\n        rippleRef.current.start(e);\r\n    };\r\n    const onRippleStop = (e) => {\r\n        rippleRef.current.stop(e);\r\n    };\r\n\r\n    return (\r\n            <div className='card rankCard' onClick={onClick} onMouseDown={onRippleStart} onMouseUp={onRippleStop}>\r\n                <h1>\r\n                    {trait}\r\n                </h1>\r\n            <IconContext.Provider value={isMobile ? {size: '6vw'} : {size: '20vw'}}>\r\n                {traitIcons[trait]}\r\n            </IconContext.Provider>\r\n                <TouchRipple ref={rippleRef} center={false}/>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default RankingTrait;\r\n","import React, {useEffect, useRef} from \"react\";\r\nimport RankingTrait from \"./TraitCards/RankingTrait\";\r\nimport {Grid, useMediaQuery} from \"@mui/material\";\r\n\r\n\r\n\r\n\r\n\r\nconst RankingPage = ({ topTraits, setTopTraits, history, fetchTopTraits}) => {\r\n    const [displayedPairs, setDisplayedPairs] = React.useState(topTraits.slice(0,2));\r\n\r\n    let initialPairs = useRef([]);\r\n    let sortedPairs = useRef([]);\r\n    let sortingPair = useRef([]);\r\n\r\n    let joinStack = useRef([]);\r\n    let mergeStack = useRef([]);\r\n\r\n    let leftGuess = useRef(0);\r\n    let rightGuess = useRef(0);\r\n\r\n    let finishedList = useRef([]);\r\n    let unevenList = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let initialTraits = topTraits\r\n        setDisplayedPairs(initialTraits.slice(0,2))\r\n\r\n        if (initialTraits.length % 2){ //initialize finished list with first element if uneven\r\n            unevenList.current = initialTraits.pop();\r\n        }\r\n        for (let i = 0; i < initialTraits.length; i += 2){ //generate pairs for the user to sort\r\n            initialPairs.current.push([initialTraits[i],initialTraits[i+1]]);\r\n        }\r\n    },[])\r\n\r\n    const handlePick = (pick) => {  //looks at which arrays are empty to determine what stage the sort is in\r\n        console.log(\"pick: \" + pick)\r\n\r\n        if(joinStack.current.length !== 0){ //checking for 'easy' joins\r\n            doJoinRound(pick)\r\n        }\r\n        else if (mergeStack.current.length !== 0){\r\n            doMergeRound(pick)\r\n        }\r\n\r\n        if (initialPairs.current.length !== 0){ //sorting pairs\r\n            doInitialRound(pick);\r\n        }\r\n\r\n        let mergeStackHasValues = mergeStack.current.some(function (any) {return any.length}); //check if all arrays are empty\r\n        if (!mergeStackHasValues && initialPairs.current.length === 0){\r\n            if (sortedPairs.current.length === 0 ){\r\n                setTopTraits(finishedList.current);\r\n                history.push('/Results');\r\n            }\r\n            else {\r\n                buildMerge(sortedPairs.current[0])\r\n            }\r\n        }\r\n\r\n\r\n        console.log(\"initialPairs: \", initialPairs.current)\r\n        console.log(\"sortedPairs: \", sortedPairs.current)\r\n        console.log(\"finished list: \", finishedList.current)\r\n        console.log(\"Join stack: \", joinStack.current)\r\n        console.log(\"mergeStack\", mergeStack.current)\r\n\r\n    }\r\n\r\n\r\n\r\n    const doInitialRound = (pick) => {\r\n\r\n        if(pick === initialPairs.current[0][0]){\r\n            initialPairs.current[0].reverse();\r\n            console.log(\"reversed \", initialPairs.current[0])\r\n        }\r\n\r\n        sortedPairs.current.push(initialPairs.current.shift());\r\n\r\n        setDisplayedPairs(initialPairs.current[0]);\r\n        if(initialPairs.current.length === 1){ //set up the merges one render ahead\r\n            if(unevenList.current !== null){ //populate finished list with uneven element\r\n                finishedList.current.push(unevenList.current);\r\n                console.log(\"Prepping for round uneven\")\r\n            }\r\n            else {\r\n                finishedList.current = sortedPairs.current.shift(); //populate list with first sorted pair\r\n                console.log(\"Prepping for round 2\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    const doJoinRound = (pick) => {\r\n        if (joinStack.current.length === 2){ //check if left or right join\r\n            if(pick === sortingPair.current[0]){\r\n                finishedList.current = finishedList.current.concat(sortingPair.current) //a 'successful' join\r\n                clearStacks();\r\n            }\r\n            else {\r\n                joinStack.current.shift();\r\n                setDisplayedPairs(joinStack.current[0])\r\n            }\r\n        }\r\n        else {\r\n            if (pick === sortingPair.current[1]){\r\n                joinStack.current = [];\r\n                setDisplayedPairs(mergeStack.current[0][0])\r\n            }\r\n            else {\r\n                finishedList.current = (sortingPair.current.concat(finishedList.current))\r\n                clearStacks();\r\n            }\r\n        }\r\n    }\r\n\r\n    const doMergeRound = (pick) => { //tries to shift back and forth between items to reduce fatigue\r\n\r\n        if(displayedPairs[0] === sortingPair.current[0]) { //lower\r\n            if (pick !== displayedPairs[0]) { //found what is liked more\r\n                finishedList.current.splice(leftGuess.current, 0, sortingPair.current[0]);\r\n                mergeStack.current[0] = [];\r\n            }\r\n            else { //keeps going\r\n                mergeStack.current[0].shift();\r\n                leftGuess.current++;\r\n                console.log(\"leftGuess \", leftGuess.current);\r\n                if(mergeStack.current[0].length === 0){\r\n                    finishedList.current.splice(leftGuess.current, 0, sortingPair.current[0]);\r\n                    mergeStack.current[0].shift();\r\n                }\r\n            }\r\n            if(mergeStack.current[1].length !== 0){\r\n                setDisplayedPairs(mergeStack.current[1][0]);\r\n            }\r\n            else {\r\n                setDisplayedPairs(mergeStack.current[0][0]);\r\n            }\r\n        }\r\n        else { // higher\r\n            if(pick === displayedPairs[0]){\r\n                finishedList.current.splice(rightGuess.current+1, 0, sortingPair.current[1]);\r\n                mergeStack.current[1] = []\r\n            }\r\n            else {\r\n                mergeStack.current[1].shift();\r\n                rightGuess.current--;\r\n                console.log(\"rightGuess \", rightGuess.current);\r\n                if(mergeStack.current[1].length === 0){\r\n                    finishedList.current.splice(rightGuess.current+1, 0, sortingPair.current[1]);\r\n                    mergeStack.current[1].shift();\r\n                }\r\n            }\r\n            if(mergeStack.current[0].length !== 0){\r\n                setDisplayedPairs(mergeStack.current[0][0]);\r\n            }\r\n            else {\r\n                setDisplayedPairs(mergeStack.current[1][0])\r\n            }\r\n        }\r\n    }\r\n\r\n    const buildMerge = (list) => {\r\n        console.log(\"building round 2\")\r\n        buildJoinStack(list);\r\n        buildMergeStack(list);\r\n        sortingPair.current = sortedPairs.current.shift();\r\n        leftGuess.current = 0;\r\n        rightGuess.current = finishedList.current.length;\r\n    }\r\n\r\n    const buildJoinStack = (list) =>{\r\n        joinStack.current.push([list[0], finishedList.current[finishedList.current.length-1]]);\r\n        joinStack.current.push([list[1],finishedList.current[0]]);\r\n        setDisplayedPairs(joinStack.current[0])\r\n        console.log(\"Initial Join stack: \", joinStack.current)\r\n    }\r\n\r\n    const buildMergeStack = (list) => {\r\n        let leftMergeStack = [];\r\n        let rightMergeStack = [];\r\n\r\n        for(let i = 0; i < finishedList.current.length; i++){\r\n            leftMergeStack.push([list[0],finishedList.current[i]]);\r\n        }\r\n        for(let i = finishedList.current.length - 1; i >= 0; i--){\r\n            rightMergeStack.push([list[1], finishedList.current[i]]);\r\n        }\r\n        mergeStack.current = [leftMergeStack, rightMergeStack];\r\n        console.log(\"initial mergeStack\", mergeStack.current)\r\n    }\r\n    const clearStacks = () => {\r\n        joinStack.current = [];\r\n        mergeStack.current = [];\r\n        sortingPair.current = [];\r\n    }\r\n\r\n    const isMobile = useMediaQuery('(min-width:1024px)')\r\n\r\n    return (\r\n        <div>\r\n            <Grid container\r\n                  spacing={isMobile ? 60 : 1}\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\"\r\n                  direction={isMobile ? \"row\" : \"column\"}\r\n            >\r\n                <Grid item>\r\n                    <RankingTrait onClick={() => handlePick(displayedPairs[0])} trait={displayedPairs[0]}/>\r\n                </Grid>\r\n                <Grid item>\r\n                    <RankingTrait onClick={() => handlePick(displayedPairs[1])} trait={displayedPairs[1]}/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default RankingPage;\r\n\r\n\r\n","import React from \"react\";\r\nimport {Dialog, DialogContentText, DialogTitle, IconButton} from \"@mui/material\";\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\n\r\nconst HelpDialogBox = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <IconButton\r\n                size=\"large\"\r\n                onClick={handleOpen}\r\n            >\r\n                <HelpOutlineIcon/>\r\n            </IconButton>\r\n\r\n        <Dialog\r\n            onClose={handleClose}\r\n            open = {open}\r\n            maxWidth={\"xl\"}\r\n            style={{borderRadius: 0}}\r\n        >\r\n            <DialogContentText paragraph={false} style={{margin: \"24px\"}}>\r\n                <br/>1. Drag traits to the left or right depending on whether you value them.<br/>\r\n                <br/>2. Click on the traits you value more.<br/>\r\n                <br/>3. Click the share buttons to show your friends!<br/>\r\n            </DialogContentText>\r\n        </Dialog>\r\n        </div>\r\n    )\r\n}\r\nexport default HelpDialogBox;\r\n","import React from \"react\";\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst HomeButton = ({history}) => {\r\n    const handleHome = () => {\r\n        history.push('/')\r\n    }\r\n    return(\r\n        <Button\r\n            color=\"inherit\"\r\n            onClick={handleHome}\r\n        >\r\n            Trait Ranker</Button>\r\n    )\r\n}\r\nexport default HomeButton;\r\n\r\n\r\n","import React from \"react\";\r\nimport {AppBar, Box, Toolbar} from \"@mui/material\";\r\n\r\nimport HelpDialogBox from \"./HelpDialogBox\";\r\nimport HomeButton from \"./HomeButton\";\r\n\r\n\r\nconst NavBar = ({history}) => {\r\nreturn(\r\n    <Box sx={{flexGrow: 1}}>\r\n        <AppBar position=\"fixed\">\r\n            <Toolbar>\r\n                <HomeButton history={history} />\r\n                <div style={{marginLeft: \"auto\"}}>\r\n                    <HelpDialogBox/>\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    </Box>\r\n)\r\n}\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport '../../style/CardStyle.scss'\r\nimport {traitIcons} from \"../../utils/listOfAllTraits\";\r\nimport { IconContext } from \"react-icons\";\r\nimport {useMediaQuery} from \"@mui/material\";\r\n\r\nconst SelectionTrait = ({trait, provided}) => {\r\n    const isMobile = useMediaQuery('(min-width:1024px')\r\n\r\n\r\n    return (\r\n        <div className='card selection' {...provided.dragHandleProps} draggable={true} id={trait}>\r\n            <h1>\r\n                {trait}\r\n            </h1>\r\n            <IconContext.Provider value={isMobile ? {size: '6vw'} : {size: '60vw'}}>\r\n                {traitIcons[trait]}\r\n            </IconContext.Provider>\r\n        </div>\r\n        )}\r\nexport default SelectionTrait\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport SelectionTrait from \"./SelectionTrait\";\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n \r\n`;\r\n\r\n\r\nconst draggingCustomStyle = (style: React.CSSProperties | undefined) => {\r\n    if (style?.transform) {\r\n        const axisLockX = `${style.transform.split(\",\").shift()}, 0px)`;\r\n        return {\r\n            ...style,\r\n            transform: axisLockX\r\n        };\r\n    }\r\n    return style;\r\n};\r\n\r\nfunction getStyle(style, snapshot) {\r\n    style = draggingCustomStyle(style)\r\n    if (!snapshot.isDropAnimating) {\r\n        return style;\r\n    }\r\n    const { moveTo, duration } = snapshot.dropAnimation;\r\n    const draggingOver = snapshot.draggingOver\r\n    console.log(draggingOver)\r\n    let offset = 0\r\n    if (draggingOver === 'column1'){\r\n        offset = -100\r\n    }\r\n    else if (draggingOver === 'column3'){\r\n        offset = 100\r\n    }\r\n    // move to the right spot\r\n    const translate = `translate(${offset}vw, ${moveTo.y}px)`;\r\n\r\n    // patching the existing style\r\n    return {\r\n        ...style,\r\n        transform: translate,\r\n        // slowing down the drop\r\n        transition: `all  ${duration + .2}s`,\r\n    };\r\n}\r\n\r\nconst TraitDraggable = ({ trait, index}) => {\r\n\r\n\r\n    return(\r\n        <Draggable draggableId={trait} key={trait} index={index} >\r\n            {(provided, snapshot) => (\r\n                <Container\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                    isDragging={snapshot.isDragging}\r\n                    style={getStyle(provided.draggableProps.style, snapshot)}\r\n                >\r\n                        <SelectionTrait trait={trait} provided={provided}/>\r\n                </Container>\r\n            )}\r\n\r\n        </Draggable>\r\n    )\r\n}\r\nexport default TraitDraggable\r\n","import React from \"react\";\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\nimport styled from 'styled-components'\r\nimport TraitDraggable from '../TraitCards/TraitDraggable';\r\nimport '../../style/CardStyle.scss'\r\nimport {Grid} from \"@mui/material\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`;\r\n\r\n\r\nconst TraitList = styled.div`\r\n  transition: background-color 0.2s ease;\r\n  background-color: ${props => (props.isDraggingOver ? props.hoverColor: 'white')};\r\n  display: flex;\r\n  min-width: ${props => (props.isStarter ? '1px' : '49.9vw')};\r\n  min-height:  100vh;\r\n  max-width: ${props =>(props.isStarter && '1px')};\r\n`;\r\n\r\n\r\n\r\nconst SelectionDroppable = ({ column, isStarter = false, hoverColor = 'lightBlue'}) => {\r\n    return(\r\n\r\n            <Droppable key={column.id} droppableId={column.id} direction='horizontal'>\r\n                {(provided, snapshot) => (\r\n                    <TraitList\r\n                        classname='cards stack'\r\n                        ref={provided.innerRef}\r\n                        isStarter={isStarter}\r\n                        hoverColor = {hoverColor}\r\n                        isDraggingOver={snapshot.isDraggingOver}\r\n                        {...provided.droppableProps}\r\n                    >\r\n                        <Grid\r\n                            container\r\n                            direction=\"column\"\r\n                            alignItems=\"center\"\r\n                            justifyContent=\"center\"\r\n                        >\r\n                            <Grid item margin=\"auto\">\r\n                        {isStarter && <TraitDraggable key={column?.traitIds[0]}\r\n                                                      trait={column?.traitIds[0]}\r\n                                                      index={column?.traitIds.indexOf(column?.traitIds[0])}\r\n                        />}\r\n                        {provided.placeholder}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </TraitList>\r\n                )}\r\n            </Droppable>\r\n    )\r\n}\r\n\r\nexport default SelectionDroppable\r\n","// @flow\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport SelectionDroppable from \"./SelectionDroppable\";\r\nimport {Box, Grid} from \"@mui/material\";\r\nimport {useSwipeable} from \"react-swipeable\";\r\nimport type {PreDragActions, SensorAPI, SnapDragActions} from \"react-beautiful-dnd/src/types\";\r\n\r\n\r\n\r\nfunction noop() {}\r\n\r\n\r\nconst SelectionPage = ({columnData,  setTopTraits,  history, swipeHandlers}) =>{\r\n\r\n    useEffect(()=>{\r\n        console.log(\"currentTraits: \", columnData.columns.column2.traitIds)\r\n        console.log(\"top traits: \", columnData.columns.column3.traitIds)\r\n        if(columnData.columns.column2.traitIds.length === 0){\r\n            console.log(columnData.columns.column3.traitIds)\r\n               setTopTraits(columnData.columns.column3.traitIds);\r\n               history.push(\"/Rank\");\r\n           }\r\n\r\n    },[columnData, history, setTopTraits])\r\n\r\n    return(\r\n        <Box>\r\n                <div {...swipeHandlers} >\r\n                        <Grid container\r\n                              spacing={0}\r\n                              wrap=\"nowrap\">\r\n                                <SelectionDroppable key={columnData.columns.column1.id} column={columnData.columns.column1} hoverColor={'LightPink'}/>\r\n                                <SelectionDroppable key={columnData.columns.column2.id} column={columnData.columns.column2} isStarter={true} />\r\n                                <SelectionDroppable key={columnData.columns.column3.id} column={columnData.columns.column3} hoverColor={'LightGreen'}/>\r\n                        </Grid>\r\n                </div>\r\n        </Box>\r\n    )\r\n};\r\nexport default SelectionPage;\r\n","import React from \"react\";\r\nimport '../../style/CardStyle.scss'\r\nimport {traitIcons} from \"../../utils/listOfAllTraits\";\r\nimport { IconContext } from \"react-icons\";\r\nimport {useMediaQuery} from \"@mui/material\";\r\n\r\nconst ReorderTrait = ({trait, provided}) => {\r\n    const isMobile = useMediaQuery('(min-width:1024px')\r\n\r\n\r\n    return (\r\n        <div className='card reorder' {...provided.dragHandleProps} draggable={true} id={trait}>\r\n            <h3>\r\n                {trait}\r\n            </h3>\r\n            <IconContext.Provider value={isMobile ? {size: '1vw'} : {size: '3vw'}}>\r\n                {traitIcons[trait]}\r\n            </IconContext.Provider>\r\n        </div>\r\n    )}\r\nexport default ReorderTrait\r\n","import React from 'react';\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport ReorderTrait from \"./ReorderTrait\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FreeDragTrait = ({trait, index}) => {\r\n\r\n    const Container = styled.div`\r\n        display: flex;\r\n    `;\r\n    return(\r\n        <Draggable draggableId={trait} index={index}>\r\n            {(provided)=>(\r\n                <Container\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                    >\r\n                    <ReorderTrait trait={trait} provided={provided} />\r\n                </Container>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\nexport default FreeDragTrait;\r\n","import React, {useState} from 'react'\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\nimport {Grid} from '@mui/material'\r\nimport FreeDragTrait from \"../TraitCards/FreeDragTrait\";\r\nimport styled from 'styled-components';\r\n\r\nconst DragColumn = styled.div`\r\n  min-width: 8vw;\r\n  display: flex;\r\n`\r\n\r\nconst ReorderableColumn = ({column}) =>{\r\n\r\n    return(\r\n        <div>\r\n            <Droppable key={column.id} droppableId={column.id}>\r\n                {(provided,snapshot)=>(\r\n                    <DragColumn\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        isDraggingOver={snapshot.isDraggingOver}\r\n                    >\r\n                        <Grid\r\n                        container\r\n                        direction='column'\r\n                        >\r\n                        {column.traitIds.map(trait =>{\r\n                            return(\r\n                                <Grid item key={trait}>\r\n                                    <FreeDragTrait trait={trait} index={column.traitIds.indexOf(trait)} />\r\n                                </Grid>\r\n                            )\r\n                        })}\r\n                        </Grid>\r\n                        {provided.placeholder}\r\n                    </DragColumn>\r\n                )}\r\n\r\n            </Droppable>\r\n        </div>\r\n    )\r\n}\r\nexport default ReorderableColumn\r\n","import React from \"react\";\r\nimport ReorderableColumn from \"./ReorderableColumn\";\r\nimport {Button, Grid} from \"@mui/material\";\r\n\r\n\r\nconst ReorderGuess = ({column, onDone}) =>{\r\n\r\n\r\n    return(\r\n        <Grid container direction='column'>\r\n            <Grid item>\r\n                Rearange the traits to your best guess\r\n            </Grid>\r\n            <Grid item>\r\n                <ReorderableColumn column={column} />\r\n            </Grid>\r\n            <Grid item>\r\n                <Button onClick={onDone}>\r\n                    Lock in\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\nexport default ReorderGuess\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport {Grid, useMediaQuery} from \"@mui/material\";\r\nimport RankingTrait from \"../TraitCards/RankingTrait\";\r\nimport initialTraits from \"../Selection/initialTraits\";\r\nimport shuffle from \"../../utils/ShuffleUtil\";\r\nimport ReorderableColumn from \"./ReorderableColumn\";\r\nimport ReorderGuess from \"./ReorderGuess\";\r\n\r\nconst GuessPage = ({traits, columnData, setColumnData}) => {\r\n    let traitsLeft = useRef(shuffle(traits.splice(0,7)))\r\n    let wrongTraits = useRef([])\r\n    let traitPool = initialTraits.columns.column2.traitIds//already randomized on each load\r\n    let finalList = useRef([])\r\n\r\n    const [currentTraits, setCurrentTraits] = useState([])\r\n    const [showPicks, setShowPicks] = useState(true)\r\n    const [showColumn, setShowColumn] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        while(wrongTraits.current.length < 7){ //get eligible red herrings\r\n            if (!traitsLeft.current.includes(traitPool[0]))\r\n            {\r\n                wrongTraits.current.push(traitPool[0]);\r\n            }\r\n            traitPool = traitPool.splice(1,traitPool.length);\r\n        }\r\n       loadNextTraits();\r\n    },[traitPool])\r\n\r\n    const handlePick = (pick) => {\r\n        finalList.current.push(pick)\r\n        if(traitsLeft.current.length === 0){\r\n            const newTraits = {\r\n                ...columnData.columns.guessing,\r\n                traitIds:finalList.current,\r\n            }\r\n            const newColumnData = {\r\n                ...columnData,\r\n                columns:{\r\n                    ...columnData.columns,\r\n                    guessing: newTraits,\r\n                },\r\n            }\r\n            setColumnData(newColumnData)\r\n\r\n            setShowColumn(true)\r\n            setShowPicks(false)\r\n        }\r\n        loadNextTraits()\r\n    }\r\n    const loadNextTraits = () => {\r\n        setCurrentTraits(shuffle([traitsLeft.current.pop(), wrongTraits.current.pop()]))\r\n        console.log(\"TraitsLeft: \", traitsLeft.current)\r\n        console.log(\"WrongTaits: \", wrongTraits.current)\r\n        console.log(finalList.current)\r\n    }\r\n    const onDone = () =>{\r\n        console.log(\"done\")\r\n    }\r\n\r\n    const isMobile = useMediaQuery('(min-width:1024px)')\r\n    return(\r\n        <div>\r\n            {showPicks && <Grid container\r\n                  spacing={isMobile ? 60 : 1}\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\"\r\n                  direction={isMobile ? \"row\" : \"column\"}\r\n            >\r\n\r\n                <Grid item>\r\n                    <RankingTrait onClick={() => handlePick(currentTraits[0])} trait={currentTraits[0]} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <RankingTrait onClick={() => handlePick(currentTraits[1])} trait={currentTraits[1]} />\r\n                </Grid>\r\n            </Grid>}\r\n            {showColumn && <ReorderGuess column={columnData.columns.guessing} onDone={onDone}/> }\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default GuessPage\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getDBTraits} from \"../../utils/Firebase\";\r\nimport {Grid} from \"@mui/material\";\r\nimport RankingTrait from \"../TraitCards/RankingTrait\";\r\nimport SmallTraitList from \"../SmallTraitList\";\r\nimport GuessPage from \"./GuessPage\";\r\n\r\nconst SharedPage = ({columnData, setColumnData}) => {\r\n    let {id}= useParams();\r\n    const [storedTraits,setStoredTraits] = useState([]);\r\n    const [showList, setShowList] = useState(false);\r\n    const [showGuessing, setShowGuessing] = useState(false);\r\n    const [showOptions, setShowOptions] = useState(true);\r\n    useEffect(()=>{\r\n        (async () => {\r\n            await getDBTraits(id)\r\n                .then(result => {\r\n                    setStoredTraits(result)\r\n                })\r\n        })()\r\n    },[id])\r\n    const showTraits = () =>{\r\n       setShowList(true);\r\n       setShowOptions(false);\r\n    }\r\n    const showGuess = () =>{\r\n        setShowGuessing(true);\r\n        setShowOptions(false)\r\n    }\r\n    console.log(\"storedTraits\", storedTraits)\r\n    return(\r\n        <Grid\r\n            container\r\n            direction='row'\r\n            spacking={60}>\r\n            {showOptions &&\r\n            <Grid item>\r\n                <RankingTrait onClick={showTraits} trait=\"Show the traits\"/>\r\n            </Grid> }\r\n            {showOptions &&\r\n            <Grid item>\r\n                <RankingTrait onClick={showGuess} trait=\"Guess the traits\"/>\r\n            </Grid> }\r\n            {showList &&\r\n            <Grid item>\r\n                <SmallTraitList traits={storedTraits}/>\r\n            </Grid>}\r\n            {showGuessing &&\r\n            <Grid item>\r\n                <GuessPage traits={storedTraits} columnData={columnData} setColumnData={setColumnData}/>\r\n            </Grid>}\r\n        </Grid>\r\n    )\r\n}\r\nexport default SharedPage\r\n","// @flow\r\nimport React, {useCallback, useEffect, useRef, useState} from \"react\";\r\nimport initialTraits from './Selection/initialTraits';\r\nimport ResultsPage from \"./ResultsPage\";\r\nimport RankingPage from \"./RankingPage\";\r\nimport NavBar from \"./NavBar/NavBar\";\r\nimport {HashRouter, Route, useHistory} from \"react-router-dom\";\r\nimport SelectionPage from \"./Selection/SelectionPage\";\r\nimport ReactGA from 'react-ga';\r\nimport SharedPage from \"./Share/SharedPage\";\r\nimport {DragDropContext} from \"react-beautiful-dnd\";\r\nimport type {\r\n    FluidDragActions,\r\n    PreDragActions,\r\n    SensorAPI,\r\n} from \"react-beautiful-dnd/src/types\";\r\nimport {useSwipeable} from \"react-swipeable\";\r\nimport tweenFunctions from \"tween-functions\";\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n    const history = useHistory();\r\n    const [columnData, setColumnData] = useState(initialTraits);\r\n    const [topTraits, setTopTraits] = useState([]);\r\n    const sensorAPIRef = useRef<?SensorAPI>(null);\r\n    const TRACKING_ID = \"G-4RLGL8ENZC\";\r\n    ReactGA.initialize(TRACKING_ID);\r\n\r\n    const onDragEnd = ({destination, source, draggableId}) => {\r\n        if (!destination) {\r\n            return;\r\n        }\r\n        //make sure the draggable moved\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) {\r\n            return;\r\n        }\r\n        const start = columnData.columns[source.droppableId];\r\n        const finish = columnData.columns[destination.droppableId];\r\n\r\n        //if moving within the same column\r\n        if (start === finish) {\r\n\r\n            const newTraitIds = Array.from(start.traitIds);\r\n            newTraitIds.splice(source.index, 1);\r\n            newTraitIds.splice(destination.index, 0, draggableId);\r\n\r\n            const newColumn = {\r\n                ...start,\r\n                traitIds: newTraitIds,\r\n            };\r\n\r\n            //override existing column\r\n            const newData = {\r\n                ...columnData,\r\n                columns: {\r\n                    ...columnData.columns,\r\n                    [newColumn.id]: newColumn,\r\n                }\r\n            }\r\n            setColumnData(newData);\r\n            return;\r\n        }\r\n        //cross column moving\r\n        const startTraitIds = Array.from(start.traitIds);\r\n        startTraitIds.splice(source.index, 1);\r\n        const newStart = {\r\n            ...start,\r\n            traitIds: startTraitIds,\r\n        }\r\n\r\n        const finishTraitIds = Array.from(finish.traitIds);\r\n        finishTraitIds.splice(destination.index, 0, draggableId);\r\n        const newFinish = {\r\n            ...finish,\r\n            traitIds: finishTraitIds\r\n        }\r\n\r\n        const newData = {\r\n            ...columnData,\r\n            columns: {\r\n                ...columnData.columns,\r\n                [newStart.id]: newStart,\r\n                [newFinish.id]: newFinish,\r\n            },\r\n        }\r\n        setColumnData(newData);\r\n    }\r\n    async function swipe(direction){\r\n       const api: ?SensorAPI = sensorAPIRef.current;\r\n       if(!api){\r\n           console.warn('unable to find sensor api');\r\n           return null;\r\n       }\r\n       let endX;\r\n        if (direction === 'right'){\r\n            endX = 200;\r\n        }\r\n        else{\r\n            endX = -200;\r\n        }\r\n        const start = {x:0, y: 0};\r\n        const end = {x: endX, y: 0};\r\n\r\n       const preDrag = api.tryGetLock(columnData.columns.column2.traitIds[0]);\r\n\r\n       if(!preDrag){\r\n           console.log('unable to start capturing');\r\n           return null;\r\n       }\r\n\r\n       const drag = preDrag.fluidLift(start);\r\n\r\n       const points = [];\r\n\r\n       for (let i = 0; i < 20; i++){\r\n           points.push({\r\n               x: tweenFunctions.easeOutCirc(i, start.x, end.x, 20),\r\n               y: tweenFunctions.easeOutCirc(i, start.y, end.y, 20)\r\n           });\r\n       }\r\n       moveStepByStep(drag, points);\r\n    }\r\n\r\n    const swipeHandlers = useSwipeable({\r\n        onSwipedLeft: () => {\r\n            console.log(\"left swiped\")\r\n            swipe('left')\r\n        },\r\n        onSwipedRight: () => {\r\n            console.log(\"right swiped\")\r\n            swipe('right')\r\n        },\r\n    })\r\n\r\n    function moveStepByStep(drag, values){\r\n        requestAnimationFrame(()=>{\r\n            const newPosition = values.shift();\r\n            drag.move(newPosition);\r\n            if (values.length){\r\n                moveStepByStep(drag,values);\r\n            }\r\n            else {\r\n                drag.drop();\r\n            }\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <DragDropContext onDragEnd={onDragEnd}  sensors={[(api) => {sensorAPIRef.current = api;},\r\n            ]}>\r\n             <NavBar history={history}/>\r\n                <Route exact path='/'>\r\n                    <SelectionPage columnData={columnData} topTraits={topTraits} setTopTraits={setTopTraits} setColumnData={setColumnData} history={history} swipeHandlers={swipeHandlers} />\r\n                 </Route>\r\n                 <Route path='/Rank'>\r\n                    <RankingPage topTraits={topTraits} setTopTraits={setTopTraits} history={history} />\r\n                 </Route>\r\n                <Route path='/Results'>\r\n                     <ResultsPage topTraits={topTraits} setTopTraits={setTopTraits} />\r\n                </Route>\r\n                 <Route path='/Share/:id' children={<SharedPage columnData={columnData} setColumnData={setColumnData} />}/>\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AppWrapper = () => {\r\n    return(\r\n        <HashRouter basename={'/trait-ranker'}>\r\n                <App/>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\n\r\nexport default AppWrapper;\r\n","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport AppWrapper from \"./components/App\";\r\n\r\nReactDOM.render(<AppWrapper/>, document.querySelector('#root'));\r\n"],"sourceRoot":""}